---
description: 后端Api接口参考与DTO,VO说明，与swagger配合使用
globs: 
alwaysApply: false
---
# AriaVerse 后端API参考 (供前端AI使用)

本文档旨在为前端AI提供AriaVerse后端API的详细说明，以便更准确地理解和实现前端功能。

## 1. API设计规范

- **RESTful风格**: 所有API均遵循RESTful设计原则。
- **JSON格式**: 请求和响应数据主要使用JSON格式。
- **统一响应结构**: 后端API会返回统一的响应结构，方便前端处理。
    ```json
    {
      "code": 200, // 状态码，200表示成功，其他表示错误
      "message": "操作成功", // 提示信息
      "data": {} // 实际返回的数据
    }
    ```
- **错误处理**: API会通过HTTP状态码和响应体中的`code`、`message`字段来指示错误情况。
- **认证与授权**: API通过cookie进行认证，具体参考用户认证相关接口。

## 2. 核心API接口说明

以下是项目中一些核心功能的API接口描述。更详细的接口文档请参考Swagger或OpenAPI规范（如果项目中有集成）。

### 2.1 用户认证模块 (`/api/Aria/auth`)

- **POST `/api/Aria/auth/register`**: 用户注册
    - **请求体**: `RegisterDTO` (包含 `email`, `username`, `password`)
    - **响应**: 统一响应结构，`data`中包含成功提示。
- **POST `/api/Aria/auth/login`**: 用户登录
    - **请求体**: `LoginDTO` (包含 `email`, `password`)
    - **行为**：在session中的`user`键中存储user_id，, `email`和`username`。
    - **响应**: 统一响应结构，`data`中包含 `user_id`, `email`和`username`。

### 2.2 AI聊天模块 (`/api/Aria/ai`)

- **POST `/api/Aria/ai/chat`**: 与AI进行对话 (流式接口)
    - **请求体**:`ChatDTO` (包含 `prompt` (String): 用户输入的提示词, `chatId` (String): 当前会话的ID)
    - **响应**: `text/event-stream` 类型，AI逐字返回内容。
    - **认证**: 需要cookie

### 2.3 聊天会话管理模块 (`/api/Aria/session`)

- **GET `/api/Aria/session`**: 获取历史会话列表 (游标分页)
    - **请求参数**:
        - `lastConversationId` (String, 可选): 上一页最后一条会话的ID，用于游标分页
        - `pageSize` (Integer, 可选): 每页数量，默认为10
    - **响应**: 统一响应结构，`data`中包含 `ChatSessionVO` 列表。
    - **认证**: 需要cookie
- **POST `/api/Aria/session`**: 创建新的聊天会话
    - **请求体**: `title`（会话标题）
    - **响应**: 统一响应结构，`data`中包含新创建的会话ID (`conversationId`)。
    - **认证**: 需要cookie
- **DELETE `/api/Aria/session/{conversationId}`**: 删除指定的聊天会话
    - **路径参数**: `conversationId` (String): 要删除的会话ID
    - **请求参数**:
        - `clearChatMemory` (Boolean, 可选, 默认为true): 是否同时清除该会话的聊天记录
    - **响应**: 统一响应结构，提示删除成功或失败。
    - **认证**: 需要cookie
- **POST `/api/Aria/session/batch-delete`**: 批量删除聊天会话
    - **请求体**: `BatchDeleteSessionsDTO` (包含 `conversationIds` 列表, `clearChatMemory` 布尔值)
    - **响应**: 统一响应结构，`data`中包含成功删除的数量。
    - **认证**: 需要cookie

### 2.4 聊天记录模块 (`/api/Aria/session/history`)

- **GET `/api/Aria/session/history/{conversationId}`**: 获取指定会话的聊天记录 (游标分页)
    - **路径参数**: `conversationId` (String): 会话ID
    - **请求参数**:
        - `lastMessageTimestamp` (String/Long, 可选): 上一页最后一条消息的时间戳，用于游标分页
        - `pageSize` (Integer, 可选): 每页数量，默认为10
    - **响应**: 统一响应结构，`data`中包含 `ChatMessageVO` 列表。
    - **认证**: 需要cookie

## 3. 数据传输对象 (DTO) 和视图对象 (VO) 说明


DTOs 用于客户端向服务器发送数据，通常作为请求体。

### 1. LoginDTO

**描述:** 用户登录数据传输对象

| 字段名   | 类型   | 描述           | 示例值             |
| -------- | ------ | -------------- | ------------------ |
| `email`  | String | 用户邮箱       | `user@example.com` |
| `password` | String | 密码 (长度6-20) | `password123`      |

### 2. RegisterDTO

**描述:** 用户注册数据传输对象

| 字段名   | 类型   | 描述             | 示例值             |
| -------- | ------ | ---------------- | ------------------ |
| `email`  | String | 用户邮箱         | `user@example.com` |
| `username` | String | 用户名 (长度4-20) | `username`         |
| `password` | String | 密码 (长度6-20)   | `password123`      |

### 3. ChatDTO

**描述:** 聊天数据传输对象

| 字段名           | 类型   | 描述             | 示例值                   |
| ---------------- | ------ | ---------------- | ------------------------ |
| `prompt`         | String | 用户输入的提示词 | `你好，今天的天气怎么样？` |
| `conversationId` | String | 会话Id           | `1234567890`             |


VOs 用于服务器向客户端返回数据，通常作为响应体。

### 1. ChatMessageVO

**描述:** 聊天消息视图对象

| 字段名           | 类型          | 描述                                   | 示例值                         |
| ---------------- | ------------- | -------------------------------------- | ------------------------------ |
| `userId`         | Long          | 用户ID                                 | `1001`                         |
| `conversationId` | String        | 会话ID                                 | `conv_abc123`                  |
| `textContent`    | String        | 消息内容                               | `今天天气真好！`               |
| `messageType`    | String        | 消息类型 (例如: `USER`, `ASSISTANT`)   | `USER`                           |
| `timestamp`      | LocalDateTime | 消息的时间戳                           | `2023-10-27T10:15:30`          |

### 2. ChatSessionVO

**描述:** 聊天会话表视图对象

| 字段名           | 类型          | 描述                   | 示例值                         |
| ---------------- | ------------- | ---------------------- | ------------------------------ |
| `conversationId` | String        | 会话ID                 | `sess_xyz789`                  |
| `userId`         | Long          | 用户ID                 | `1001`                         |
| `title`          | String        | 会话标题               | `关于Java编程的讨论`           |
| `createdAt`      | LocalDateTime | 创建时间               | `2023-10-26T14:30:00`          |
| `updatedAt`      | LocalDateTime | 最后更新时间           | `2023-10-27T10:20:00`          |
| `lastMessage`    | String        | 会话摘要/最后一条消息  | `我们下次再继续讨论这个话题。` |

### 3. LoginVO

**描述:** 用户登录成功后返回的视图对象

| 字段名   | 类型   | 描述   | 示例值             |
| -------- | ------ | ------ | ------------------ |
| `userId` | Long   | 用户ID | `1001`             |
| `email`  | String | 邮箱   | `user@example.com` |
| `username` | String | 用户名 | `username`         |




